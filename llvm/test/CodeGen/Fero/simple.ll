; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=fero %s -o - | FileCheck %s

define i16 @or(i16 %a, i16 %b) {
entry:
  ; CHECK-LABEL: or:
  ; CHECK: or r1, r0
  ; CHECK-NEXT: mov r0, r1
  ; CHECK-NEXT: ret
  %or = or i16 %b, %a
  ret i16 %or
}

define i16 @mov_indirect(i16* %a) {
entry:
  ; CHECK-LABEL: mov_indirect:
  ; CHECK: mov r0, [r0]
  ; CHECK-NEXT: ret
  %0 = load i16, i16* %a
  ret i16 %0
}

define void @str(i16* nocapture noundef writeonly %a, i16 noundef %b) {
entry:
  ; CHECK-LABEL: str:
  ; CHECK: str [r0], r1
  ; CHECK-NEXT: ret
  store i16 %b, i16* %a
  ret void
}

define i16 @add(i16 %a, i16 %b) {
entry:
  ; CHECK-LABEL: add:
  ; CHECK: add r0, r1
  ; CHECK-NEXT: ret
  %0 = add i16 %a, %b
  ret i16 %0
}

define i16 @sub(i16 %a, i16 %b) {
entry:
  ; CHECK-LABEL: sub:
  ; CHECK: sub r0, r1
  ; CHECK-NEXT: ret
  %0 = sub i16 %a, %b
  ret i16 %0
}

define i16 @setcc_eq(i16 %a, i16 %b) {
entry:
; CHECK-LABEL: setcc_eq:
; CHECK: ld	r2, 0
; CHECK-NEXT: cmp	r0, r2
; CHECK-NEXT: mov.Z	r0, r1
; CHECK-NEXT: ret
  %cmp = icmp eq i16 %a, 0
  %b.a = select i1 %cmp, i16 %b, i16 %a
  ret i16 %b.a
}

define i16 @set(i16 %a, i16 %b) {
entry:
; CHECK: set:
; CHECK: ld	r1, 0
; CHECK-NEXT: cmp	r0, r1
; CHECK-NEXT: set	r0, 2
; CHECK-NEXT: ret
  %cmp = icmp ne i16 %a, 0
  %. = zext i1 %cmp to i16
  ret i16 %.
}
