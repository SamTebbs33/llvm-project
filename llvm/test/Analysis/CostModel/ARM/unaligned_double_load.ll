; NOTE: Assertions have been autogenerated by utils/update_analyze_test_checks.py
; RUN: opt -passes="print<cost-model>" 2>&1 -disable-output -mtriple=thumbv6m-none-eabi < %s | FileCheck %s --check-prefix=CHECK-NOVEC
; RUN: opt -passes="print<cost-model>" 2>&1 -disable-output -mtriple=thumbv7m-none-eabi -mcpu=cortex-m4 < %s | FileCheck %s --check-prefix=CHECK-FP

define float @f(ptr %x) {
; CHECK-NOVEC-LABEL: 'f'
; CHECK-NOVEC-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %a.0.copyload = load float, ptr %x, align 1
; CHECK-NOVEC-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %a.0.copyload
;
; CHECK-FP-LABEL: 'f'
; CHECK-FP-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %a.0.copyload = load float, ptr %x, align 1
; CHECK-FP-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float %a.0.copyload
;
entry:
  %a.0.copyload = load float, ptr %x, align 1
  ret float %a.0.copyload
}

define float @ff(ptr %x, float %f) {
; CHECK-NOVEC-LABEL: 'ff'
; CHECK-NOVEC-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store float %f, ptr %x, align 1
; CHECK-NOVEC-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float undef
;
; CHECK-FP-LABEL: 'ff'
; CHECK-FP-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: store float %f, ptr %x, align 1
; CHECK-FP-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret float undef
;
entry:
  store float %f, ptr %x, align 1
  ret float undef
}

define double @d(ptr %x) {
; CHECK-NOVEC-LABEL: 'd'
; CHECK-NOVEC-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: %a.0.copyload = load double, ptr %x, align 1
; CHECK-NOVEC-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %a.0.copyload
;
; CHECK-FP-LABEL: 'd'
; CHECK-FP-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: %a.0.copyload = load double, ptr %x, align 1
; CHECK-FP-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double %a.0.copyload
;
entry:
  %a.0.copyload = load double, ptr %x, align 1
  ret double %a.0.copyload
}

define double @dd(ptr %x, double %f) {
; CHECK-NOVEC-LABEL: 'dd'
; CHECK-NOVEC-NEXT:  Cost Model: Found an estimated cost of 2 for instruction: store double %f, ptr %x, align 1
; CHECK-NOVEC-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double undef
;
; CHECK-FP-LABEL: 'dd'
; CHECK-FP-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: store double %f, ptr %x, align 1
; CHECK-FP-NEXT:  Cost Model: Found an estimated cost of 1 for instruction: ret double undef
;
entry:
  store double %f, ptr %x, align 1
  ret double undef
}
